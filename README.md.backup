# Системы мониторинга

### *1. Вас пригласили настроить мониторинг на проект. На онбординге вам рассказали, что проект представляет из себя платформу для вычислений с выдачей текстовых отчетов, которые сохраняются на диск. Взаимодействие с платформой осуществляется по протоколу http. Также вам отметили, что вычисления загружают ЦПУ. Какой минимальный набор метрик вы выведите в мониторинг и почему?*

CPU load average - Даст представление величинах загрузки процессора. Далее можно будет отслеживать, какие процессы нагружают процессор сервера. . Уровень загрузки ЦПУ поможет определить уровень достаточности ресурсов для проекта в данный момент.

Memory Info - Отображение информации об оперативной памяти: общее количество оперативной памяти, количество использованной оперативной памяти, количество свободной оперативной памяти; количество памяти, используемое swap файлом. По отображению этих данных можно будет искать процессы, сильно потребляющие оперативную память.

•	Disk info - Отображение свободного места на диске, для предотвращения его полного расходования; отображение количества свободных индексных дескрипторов (inodes), для возможности продолжения создания новых файлов на диске; Disk IOps для отображения производительности жесткого диска, то есть отображение числа операций чтения и записи в единицу времени. 

•	Состояние сетевых интерфейсов - Данные помогут понять, справляются ли с работой сетевые контроллеры сервера, или их нужно заменить на более производительные либо выполнить какие-либо настройки программного обеспечения, взаимодействующего с сетевыми контроллерами. 

HTTP-запросы: 
•	общее количество запросов
•	количество ошибочных запросов
•	время выполнения запросов
•	проверка доступности платформы по http
•	метрики на уровне кодов ответа
•	уровень ошибок (коды 4ХХ, 5ХХ)
2.	операции расчета и вывода данных:
•	количество операций
•	статус операций
•	время выполнения операций
•	принято/отправлено пакетов в единицу времени
•	принято/отправлено байт в единицу времени
•	ошибки при приеме/передаче
•	загрузка сетевого канала

### *2. Менеджер продукта посмотрев на ваши метрики сказал, что ему непонятно что такое RAM/inodes/CPUla. Также он сказал, что хочет понимать, насколько мы выполняем свои обязанности перед клиентами и какое качество обслуживания. Что вы можете ему предложить?*


RAM - оперативная память. Один из важнейших параметров. Размер оперативной памяти сервера влияет на скорость работы сервера, т.к. при большом объеме памяти сервер может выполнять больше задач и процессов одновременно. Нехватка RAM - может поставить работу системы в неприемлимое состояние.

inodes - структуры данных, которые хранят метаданных о файлах или каталогах в файловой системе диска. Каждый файл на диске содержит свой inode, который содержит информацию о размещении этого файла на диске, его временных метках, размере, правах доступа. 

CPUla - показатель того, на сколько интенсивно нагружен процессор. Если нагрузка не процессор слишком велика, возможно стоит задуматься о причинах или замене процессора на более мощный.


Для того, чтобы понять, насколько компания выполняет свои обязанности перед клиентами и какое качество возможно нужно внедрить - SLA, также надо указать целевой уровень качества обслуживания - SLO, это то, к чему стремится SLA, а в качестве метрики надо использовать индикатор качества обслуживания - SLI, это фактические показатели качества обслуживания, для выполнения SLA они должны стремиться к SLO. Качество ответов точки доступа можно определить по http кодам ответа web-сервера. Чем выше процент успешных кодов, тем лучше. Появление кодов ошибок (группы 4xx и 5xx), будет говорить о каких-то недоработках в сервисе. Доступность сервиса можно определять косвенно - по непрерывности прихода метрик нагрузки серверов. Например, когда нагрузка на ЦПУ снижается до нуля или становится атипично низкой, то возможно задачи на вычисления не поступают из-за проблем с точкой доступа или в каналах связи. Доступность можно определять и напрямую, реализовав самопроверку сервиса. Например, периодическим запуском скрипта проверки сервисов, который будет фиксировать и передавать в систему мониторинга состояние сервиса. Длительность выполнения задач на вычисления фиксировать временем запуска задачи на вычислительной ноде и временем фиксации отчёта в нодах хранения. Либо централизованно в точке доступа при старте и завершении обработки задачи. На dashboard выводить гистограмму распределения длительности выполнения задач. Для каждой метрики (группы метрик) нужно ввести определённые значения или диапазоны значений, в рамках которых наш проект должен находиться или не превышать/уменьшать их. Соответствие текущих показателей целевым и будет оценкой качества выполнения наших обязательств перед клиентами.

### *3. Вашей DevOps команде в этом году не выделили финансирование на построение системы сбора логов. Разработчики в свою очередь хотят видеть все ошибки, которые выдают их приложения. Какое решение вы можете предпринять в этой ситуации, чтобы разработчики получали ошибки приложения?*

Для централизованного хранения и обработки логов можно применить опенсорсные стеки: ELK, graylog, loki, Monq, Yandex Cloud Logging, New Relic, Bugsnag, Rollbar, Instabug. В последнее время актуальной становится связка - Vector, ClickHouse, Grafana. Для мониторинга ошибок фронтенд приложений можно использовать Sentry. Если ресурсы жестко ограничены, можно написать скрипты для проверки логов на наличие ошибок. Если они есть, грепать ошибки и информировать разработчиков, например на какую-нибудь общую почту или группу рассылки. Сэкономить на системе логирования можно, если переложить эту задачу на бюджет разработки, заставив программистов переделать код так, чтобы он работал с Sentry и выдавал не только ошибку приложения, но и весь необходимый контекст из других связанных сервисов. Можно также предложить систематизировать ошибки приложения, договорившись, чтобы приложение отдавало определенный error code при возникновении той или иной ошибки. Такой код можно превратить в метрику, и отслеживать количество тех или иных ошибок, а также аномалии в этой величине.

### *4.Вы, как опытный SRE, сделали мониторинг, куда вывели отображения выполнения SLA=99% по http кодам ответов. Вычисляете этот параметр по следующей формуле: summ_2xx_requests/summ_all_requests. Данный параметр не поднимается выше 70%, но при этом в вашей системе нет кодов ответа 5xx и 4xx. Где у вас ошибка?*



`summ_2xx_requests +summ_3xx_requests)/summ_all_requests`


Коды группы 1xx носят информационный характер

### *5. Опишите основные плюсы и минусы pull и push систем мониторинга.*

Плюсы:

Упрощение репликации данных в разные системы мониторинга или их резервные копии (на клиенте настраивается конечная точка отправки или набор таких точек)
Более гибкая настройка отправки пакетов данных с метриками (на каждом клиенте задается объем данных и частоту отправки)
UDP является менее затратным способом передачи данных, вследствие чего может вырасти производительность сбора метрик (обратной стороной медали является отсутствие гарантии доставки пакетов)
Удобно использовать в динамически изменяемом окружении - после включения очередного хоста, он начинает передавать логи в систему мониторинга.
Есть возможность запускать события по получению определенных логов, не увеличивая частоту опроса со стороны системы мониторинга.
Минусы:

При использовании UDP могут происходить потери пакетов, а соответственно и части логов.
Настройка производится на каждом клиенте.
Без дополнительной подготовки, возможны проблемы при смене ip адреса центрального сервера.
Pull-модели:

Плюсы:

Легче контролировать подлинность данных (гарантия опроса только тех агентов, которые настроены в системе мониторинга)
Можно настроить единый proxy-server до всех агентов с TLS (таким образом мы можем разнести систему мониторинга и агенты, с гарантией безопасности их взаимодействия)
Упрощенная отладка получения данных с агентов (так как данные запрашиваются посредством HTTP, можно самостоятельно запрашивать эти данные, используя ПО вне системы мониторинга)
В pull модели нет проблем с перегрузкой очередей т.к система мониторинга сама забирает данные, мониторинг никогда не станет узким местом системы.
Минусы:

Для работы в динамически изменяемом окружении, требуется какой-либо вариант система обнаружения сервисов.
Каждый агент представляет из себя сервер, со всеми плюсами и минусами со стороны безопасности.
Без прокси-сервера требуется настройка доступа к каждому клиенту за NAT.


### *6. Какие из ниже перечисленных систем относятся к push модели, а какие к pull? А может есть гибридные?*

VictoriaMetrics -push
TICK - push
Prometheus pull
Nagios - pull
Zabbix - гибридная


### *7.Склонируйте себе репозиторий и запустите TICK-стэк, используя технологии docker и docker-compose.*

![](img/1.png)

### *8.	Перейдите в веб-интерфейс Chronograf (http://localhost:8888) и откройте вкладку Data explorer.Для выполнения задания приведите скриншот с отображением метрик утилизации cpu из веб-интерфейса.*

![](img/2.png)

### *9.Изучите список telegraf inputs. Добавьте в конфигурацию telegraf следующий плагин - docker:*

![](img/3.png)
